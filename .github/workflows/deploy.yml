name: Deploy and Release to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tagger.outputs.new_tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      release_date: ${{ steps.date.outputs.date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            echo "No existing tag found, starting at v1.0.0"
            echo "latest_tag=v1.0.0" >> $GITHUB_ENV
          else
            echo "Latest tag: $latest_tag"
            echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          fi

      - name: Bump version and push tag
        id: tagger
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
          INITIAL_VERSION: 1.0.0

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          # Get the last tag or initial commit if no tags exist
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          
          # Start capturing the changelog
          {
            echo 'changelog<<EOF'
          
            # Commit History Section
            echo "## 📝 Detailed Commit History"
            echo
            git log "${last_tag}..HEAD" --pretty=format:"### %ad - %s%n%n**Author:** %an%n**Commit:** %H%n%n%b" --date=format:"%Y-%m-%d %H:%M:%S" || echo "No new commits"
            echo
          
            # Statistics Section
            echo "## 📊 Changes Statistics"
            echo
            git diff --shortstat "${last_tag}" || echo "No changes detected"
            echo
          
            # Changed Files Section
            echo "## 📁 Changed Files"
            echo
            git diff --name-status "${last_tag}" | while read -r status file; do
              case "$status" in
                A) echo "- ✨ Added: ${file}";;
                M) echo "- 📝 Modified: ${file}";;
                D) echo "- 🗑️ Deleted: ${file}";;
                R*) echo "- 📦 Renamed: ${file}";;
                C*) echo "- 📋 Copied: ${file}";;
                *) echo "- Changed: ${file}";;
              esac
            done || echo "No file changes detected"
          
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"
          
          # Debug output
          echo "Debug: Changelog content:"
          cat "$GITHUB_OUTPUT"

  deploy:
    needs: version
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  release:
    needs: [version, deploy]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.new_tag }}
          name: Release ${{ needs.version.outputs.new_tag }}
          body: |
            # 🚀 BTHL Website Release ${{ needs.version.outputs.new_tag }}
            
            ## 🌐 Deployment Status
            ✅ Successfully deployed to GitHub Pages at ${{ needs.deploy.outputs.page_url }}
            
            ${{ needs.version.outputs.changelog }}
            
            ---
            📅 Release Date: ${{ needs.version.outputs.release_date }}
            🤖 Generated automatically by GitHub Actions
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}